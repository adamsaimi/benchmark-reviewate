{
  "ground_truth_reviews": [
    {
      "line_number": 88,
      "comment": "This method acquires the `_cache_lock` and then, on a cache miss, attempts to acquire the `_db_lock`. However, the `create_post` method acquires these locks in the reverse order (`_db_lock` then `_cache_lock`). This inconsistent lock ordering creates a classic deadlock scenario. If one coroutine running `get_post_by_id` holds the `_cache_lock` and waits for `_db_lock`, while another coroutine running `create_post` holds `_db_lock` and waits for `_cache_lock`, the application will hang indefinitely. To fix this, ensure all coroutines acquire locks in the same, consistent order. For example, always acquire `_db_lock` before `_cache_lock`."
    }
  ],
  "title": "feat: Convert PostService to async and add caching",
  "body": "This MR refactors the PostService to use asynchronous operations to improve performance under I/O load. A new in-memory caching layer has been added to `get_post_by_id` to reduce database lookups for frequently accessed posts.",
  "issue_id": "ASYNC-007"
}